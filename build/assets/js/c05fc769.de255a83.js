"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[2890],{30427:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>u});var o=n(87462),i=(n(67294),n(3905));const r={sidebar_position:4},s="Using Web Core Hooks",a={unversionedId:"basics/using-hooks",id:"basics/using-hooks",title:"Using Web Core Hooks",description:"For a seamless developer experience when integrating UI Kit in your React project,",source:"@site/docs/react-ui-kit/basics/using-hooks.mdx",sourceDirName:"basics",slug:"/basics/using-hooks",permalink:"/react-ui-kit/basics/using-hooks",draft:!1,editUrl:"https://github.com/OpenIMSDK/OpenIM-Docs/tree/main/docs/docs/react-ui-kit/basics/using-hooks.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Design System",permalink:"/react-ui-kit/basics/design-system"},next:{title:"Before You Start",permalink:"/react-ui-kit/basics/before-you-start"}},l={},u=[{value:"<code>&lt;DyteProvider /&gt;</code>",id:"dyteprovider-",level:2},{value:"<code>useDyteMeeting()</code>",id:"usedytemeeting",level:2},{value:"<code>useDyteSelector()</code>",id:"usedyteselector",level:2},{value:"Example",id:"example",level:3}],c={toc:u};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"using-web-core-hooks"},"Using Web Core Hooks"),(0,i.kt)("p",null,"For a seamless developer experience when integrating UI Kit in your React project,\nwe also have a package ",(0,i.kt)("inlineCode",{parentName:"p"},"@dytesdk/react-web-core")," which is a hooks wrapper on ",(0,i.kt)("inlineCode",{parentName:"p"},"@dytesdk/web-core"),"."),(0,i.kt)("p",null,"While the Quickstart example uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"useDyteClient")," hook internally, here is a more complete example:"),(0,i.kt)("h2",{id:"dyteprovider-"},(0,i.kt)("inlineCode",{parentName:"h2"},"<DyteProvider />")),(0,i.kt)("p",null,"It is a simple context provider providing the meeting object to child components."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useDyteClient } from '@dytesdk/react-web-core';\n\nfunction App() {\n  const [client, initClient] = useDyteClient();\n\n  useEffect(() => {\n    initClient({\n      roomName: '<room-name>',\n      authToken: '<auth-token>',\n      // set default values for user media\n      defaults: {\n        audio: false,\n        video: true,\n      },\n    });\n  }, []);\n\n  return (\n    <DyteProvider value={client}>\n      <Meeting />\n    </DyteProvider>\n  );\n}\n")),(0,i.kt)("p",null,"And to consume the context value, we provide two more hooks, each serving a specific purpose nicely."),(0,i.kt)("p",null,"These are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"useDyteMeeting()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"useDyteSelector()"))),(0,i.kt)("h2",{id:"usedytemeeting"},(0,i.kt)("inlineCode",{parentName:"h2"},"useDyteMeeting()")),(0,i.kt)("p",null,"This hook essentially returns the ",(0,i.kt)("inlineCode",{parentName:"p"},"meeting")," object you passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"DyteProvider"),"."),(0,i.kt)("p",null,"The value returned doesn't re-render always whenever properties inside the object change."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useDyteSelector, useDyteMeeting } from '@dytesdk/react-web-core';\n\nfunction Meeting() {\n  const { meeting } = useDyteMeeting();\n\n  /*\n    use joinRoom() method or the setup screen component\n    to actually enter the meeting\n  */\n  useEffect(() => {\n    meeting.joinRoom();\n  }, [meeting]);\n\n  // show DyteMeeting\n  return <DyteMeeting meeting={meeting} />;\n}\n")),(0,i.kt)("h2",{id:"usedyteselector"},(0,i.kt)("inlineCode",{parentName:"h2"},"useDyteSelector()")),(0,i.kt)("p",null,"If you're familiar with Redux's ",(0,i.kt)("a",{parentName:"p",href:"https://react-redux.js.org/api/hooks#useselector"},"useSelector")," hook, this hook works in a similar way."),(0,i.kt)("p",null,"It allows you to extract data from the ",(0,i.kt)("inlineCode",{parentName:"p"},"meeting")," object using a selector function."),(0,i.kt)("p",null,"This hook will only cause a re-render when the actual data you returned for changes."),(0,i.kt)("p",null,"Here is how you can get all the joined participants data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const joinedParticipants = useDyteSelector((meeting) => meeting.participants.joined);\n")),(0,i.kt)("p",null,"Refer to core ",(0,i.kt)("a",{parentName:"p",href:"/web-core/reference/DyteClient"},"documentation for reference")," on the various properties of the ",(0,i.kt)("inlineCode",{parentName:"p"},"meeting")," object."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { useDyteMeeting, useDyteSelector } from '@dytesdk/react-web-core';\nimport { DyteGrid, DyteButton } from '@dytesdk/react-ui-kit';\n\nfunction Meeting() {\n  const { meeting } = useDyteMeeting();\n  const roomJoined = useDyteSelector((m) => m.self.roomJoined);\n\n  if (!roomJoined) {\n    return (\n      <div>\n        <p>You haven't joined the room yet.</p>\n        <DyteButton onClick={() => meeting.joinRoom()}>Join Room</DyteButton>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ height: '100vh', width: '100vw' }}>\n      <DyteGrid meeting={meeting} />\n    </div>\n  );\n}\n\nexport default Meeting;\n")))}d.isMDXComponent=!0}}]);